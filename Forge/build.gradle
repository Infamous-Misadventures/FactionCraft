buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

archivesBaseName = "${minecraft_version}-${version}-forge"

minecraft {
    mappings channel: "parchment", version: "2022.11.27-1.19.2"
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for FactionCraft.')
    }

    runs {
        client {
            workingDirectory project.file('run')

            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'

            arg "-mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'

            arg "-mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'

            arg "-mixin.config=${mod_id}.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	config "${mod_id}.mixins.json"

	debug.export = true
}

repositories {
    maven {
        name = "CurseForge Maven" //Base
		url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
	}
    maven { 
	    name = "Shedaniel Maven" //REI + Cloth Config
	    url "https://maven.shedaniel.me/" 
	}
	maven {
	    name = "Architectury Maven" //Architectury
	    url "https://maven.architectury.dev/" 
	}
   	maven {
		name = "GeckoLib Maven" //Geckolib
		url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
	}
    maven { 
        name = "IllusiveC4 Maven" //Curios
        url = "https://maven.theillusivec4.top/" 
    }
    maven {
		name = "Progwml6 maven" //JEI
		url = "https://dvs1.progwml6.com/files/maven/"
	}
}

dependencies {
    //Base
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //Extras
    runtimeOnly    fg.deobf("curse.maven:spark-361579:${spark_version}")

    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    implementation fg.deobf("curse.maven:just-enough-resources-jer-240630:${jer_version}")
	implementation fg.deobf("curse.maven:just-enough-effect-descriptions-jeed-532286:${jeed_version}")

	implementation fg.deobf("curse.maven:appleskin-248787:${appleskin_version}")
    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_version}")

	implementation fg.deobf("curse.maven:configured-457570:${configured_version}")
	implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")

    //Multiloader Specific
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) { source(project(":Common").sourceSets.main.allSource) }

processResources {
    from project(":Common").sourceSets.main.resources

    exclude '**/.cache/'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
