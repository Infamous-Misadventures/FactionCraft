buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge and Mixin to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "faction_craft.mixins.json"
}

version = "${mc_version}-${mod_version}"
group = 'com.patrigan.faction_craft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17) //Gradle 7+ & FG v5.1+ are compatible with JDK 16 but for minecraft versions below 1.17 we have to target Java 8

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Run configurations
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                faction_craft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                faction_craft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'faction_craft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                faction_craft {
                    source sourceSets.main
                }
            }
        }

        test_client {
            //run-config to run the TestMod on client side
            parent runs.client
            taskName 'runTestClient'

            mods {
                faction_craft { source sourceSets.main }
                tests { source sourceSets.test } //include the code (TestMod) in the test module
            }
        }

        test_server {
            //run.config to run the TestMod on server side
            parent runs.server
            taskName 'runTestServer'

            mods {
                faction_craft { source sourceSets.main }
                tests { source sourceSets.test } //include the code (TestMod) in the test module
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//repositories {
//    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
//}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.45')
//    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.45')



    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

jar {
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes([
                "Specification-Title"     : "Faction Craft",
                "Specification-Vendor"    : "Patrigans Mods",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Infamous Mods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "faction_craft.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}